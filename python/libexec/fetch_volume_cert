#!/usr/bin/python
"""
   Copyright 2015 The Trustees of Princeton University

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
"""

"""
Usage:  fetch_volume_cert [ms_url] [name of volume] [OPTIONAL: output path]

"""

import os
import sys
import requests 
import traceback 

import syndicate.protobufs.ms_pb2 as ms_pb2
import syndicate.protobufs.sg_pb2 as sg_pb2

MAX_CERT_LEN = 10 * 1024 * 1024

def print_error( s ):
   print >> sys.stderr, s
   

def fetch_volume_cert( ms_url, volume_name ):
   """
   Go fetch a volume certificate.
   Return the deserialized ms_volume_metadata protobuf on success.
   Return None on error.
   """
   
   cert_url = ms_url + "/VOLUME/" + volume_name
   
   req = requests.get( cert_url, stream=True )
   if req.status_code != 200:
      
      req.close()
      print_error("Failed to fetch volume certificate for '%s' from '%s': status code %s" % (cert_url, volume_name, req.status_code))
      return None 
   
   if int(req.headers['content-length']) > MAX_CERT_LEN:
      
      req.close()
      print_error("Certificate for volume '%s' from '%s' is too long (%s bytes)" % (volume_name, cert_url, req.headers['content-length']))
      return None
   
   cert_bin = req.content
   cert = None
   
   req.close()
   
   try:
      cert = ms_pb2.ms_volume_metadata()
      cert.ParseFromString( cert_bin )
   except Exception, e:
      
      traceback.print_exc()
      print_error("Failed to parse response for volume '%s' from '%s'" % (volume_name, cert_url))
      return None 
   
   return cert_bin
   

def usage( progname ):
   print "%s [MS url] [volume name] [OPTIONAL: output path]"
   
   
if __name__ == "__main__":
   
   if len(sys.argv) < 3:
      usage( sys.argv[0] )
      sys.exit(1)
      
   ms_url = None
   volume_name = None
   path = None
   user_cert = None
   
   ms_url = sys.argv[1]
   volume_name = sys.argv[2]
      
   if len(sys.argv) >= 4:
      path = sys.argv[3]
   
   # get volume cert
   volume_cert_bin = fetch_volume_cert( ms_url, volume_name )
   if volume_cert_bin is None:
      sys.exit(1)
   
   else:
      
      if path is None:
         
         sys.stdout.write( volume_cert_bin )
         sys.stdout.flush()
         
      else:
         
         with open(path, "w") as f:
            f.write( volume_cert_bin )
            f.flush()
         
      sys.exit(0)
