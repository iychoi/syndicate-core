#!/usr/bin/env python
"""
   Copyright 2015 The Trustees of Princeton University

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
"""

"""
Usage:  fetch_driver [ms_url] [driver hash]
Will exit 2 if there is no driver to be had
"""

import os
import sys 
import requests 
import traceback
import hashlib

import syndicate.protobufs.ms_pb2 as ms_pb2
import syndicate.protobufs.sg_pb2 as sg_pb2

MAX_DRIVER_LEN = 10 * 1024 * 1024 * 1024   # 10 MB

def print_error( s ):
   print >> sys.stderr, s
   

def fetch_gateway_driver( ms_url, driver_hash ):
   """
   Go fetch a gateway certificate.
   Return the deserialized ms_gateawy_cert protobuf on success.
   Return None on error.
   """
   
   driver_url = ms_url + "/DRIVER/" + driver_hash
   
   req = requests.get( driver_url, stream=True )
   if req.status_code != 200:
      
      req.close()
      print_error("Failed to fetch gateway driver from '%s': status code %s" % (driver_url, req.status_code))
      return None 
   
   if int(req.headers['content-length']) > MAX_DRIVER_LEN:
      
      req.close()
      print_error("Certificate for gateway driver from '%s' is too long (%s bytes)" % (driver_url, req.headers['content-length']))
      return None
   
   driver_bin = req.content 
   return driver_bin 
   

def usage( progname ):
   print "%s [MS url] [driver hash] [OPTIONAL: output path]" % progname
   
   
if __name__ == "__main__":
   
   if len(sys.argv) < 3:
      usage( sys.argv[0] )
      sys.exit(1)
      
   ms_url = None
   driver_hash = None
   path = None

   h = hashlib.sha256()
   h.update("")
   empty_driver_hash = h.hexdigest()

   ms_url = sys.argv[1]
   driver_hash = sys.argv[2]

   # hash of the empty string?
   if driver_hash.lower() == empty_driver_hash:
       # no driver
       sys.stdout.write("{}")
       sys.stdout.flush()
       sys.exit(0)
    
   if len(sys.argv) >= 4:
      path = sys.argv[3]
   
   # get gateway driver
   driver_bin = fetch_gateway_driver( ms_url, driver_hash )
   if driver_bin is None:
      sys.exit(2)
   
   else:
      
      if path is None:
         
         sys.stdout.write( driver_bin )
         sys.stdout.flush()

      else:
         
         with open(path, "w") as f:
            f.write( driver_bin )
            f.flush()
         
      sys.exit(0)
