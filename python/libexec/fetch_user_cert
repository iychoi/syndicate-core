#!/usr/bin/python
"""
   Copyright 2015 The Trustees of Princeton University

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
"""

"""
Usage:  fetch_user_cert [ms_url] [name of user] [OPTIONAL: path]
"""

import os
import sys
import requests 
import traceback 

import syndicate.protobufs.ms_pb2 as ms_pb2
import syndicate.protobufs.sg_pb2 as sg_pb2


MAX_CERT_LEN = 10 * 1024 * 1024

def print_error( s ):
   print >> sys.stderr, s
   

def fetch_user_cert( ms_url, username ):
   """
   Go fetch a user certificate.
   Return the deserialized ms_user_cert protobuf on success.
   Return None on error.
   """
   
   cert_url = ms_url + "/USER/" + username
   
   req = requests.get( cert_url, stream=True )
   if req.status_code != 200:
      
      req.close()
      print_error("Failed to fetch user certificate for '%s' from '%s': status code %s" % (cert_url, username, req.status_code))
      return None 
   
   if int(req.headers['content-length']) > MAX_CERT_LEN:
      
      req.close()
      print_error("Certificate for user '%s' from '%s' is too long (%s bytes)" % (username, cert_url, req.headers['content-length']))
      return None
   
   cert_bin = req.content
   cert = None
   
   req.close()
   
   try:
      cert = ms_pb2.ms_user_cert()
      cert.ParseFromString( cert_bin )
   except Exception, e:
      
      traceback.print_exc()
      print_error("Failed to parse response for user '%s' from '%s'" % (username, cert_url))
      return None 
   
   return cert
   
   
def usage( progname ):
   print "Usage: %s [MS url] [username] [OPTIONAL: path]" % progname

   
if __name__ == "__main__":
   
   if len(sys.argv) < 3:
      usage( sys.argv[0] )
      sys.exit(1)
      
   ms_url = None
   username = 0
   path = None
   
   ms_url = sys.argv[1]
   username = sys.argv[2]
      
   if len(sys.argv) >= 4:
      path = sys.argv[3]
      
   cert_bundle = fetch_user_cert( ms_url, username )
   if cert_bundle is None:
      sys.exit(1)
   
   else:
      cert_bundle_bin = cert_bundle.SerializeToString()
      
      if path is None:
         
         sys.stdout.write( cert_bundle_bin )
         sys.stdout.flush()
         
      else:
         
         with open(path, "w") as f:
            f.write( cert_bundle_bin )
            f.flush()
         
      sys.exit(0)
